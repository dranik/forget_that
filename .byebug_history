exit
self.default_scoped.object_id
self.object_id
self
exit
klass.for_anonymization.to_sql
klass.where(created_at: (Time.now - 2000.years)..(Time.now), anonymized: 0)
klass.for_anonymization.to_sql
klass.where(created_at: (Time.now - 2000.years)..(Time.now), anonymized: 0)
klass.where(created_at: (Time.now - 2000.years)..(Time.now), anonymized: 1)
klass.where(created_at: (Time.now - 2000.years)..(Time.now), anonymized: true)
klass.where(created_at: (Time.now - 2000.years)..(Time.now))
klass.where(created_at: (Time.now - 2.years)..(Time.now - 90.days))
klass.where(created_at: (Time.now - 2.years)..(Time.now))
klass.where(anonymized: false, created_at: (Time.now - 2.years)..(Time.now))
klass.where(anonymized: false, created_at: (Time.now - 2000.years)..(Time.now))
klass.where(anonymized: false, created_at: (Time.now - 2000.years)..(retention_threshold.call))
    end)
      where(anonymized: false, created_at: (Time.now - 2000.years)..(retention_threshold.call))
scope :for_anonymization, (lambda do
klass.for_anonymization.to_sql
klass.all
klass.where(anonymizeed: true).to_sql
klass.where(anonymized: 'true').to_sql
klass.where(anonymized: true).to_sql
klass.where(anonymized: 'true')
klass.where(anonymized: true)
klass.where(anonymized: true).to_sql
klass.where(anonymized: false).to_sql
klass.where(anonymized: false)
klass.where(id: 1)
klass.where()id: 1
klass.where(anonymized: false)
klass.for_anonymization
klass.for:anonymization
klass.all
klass
